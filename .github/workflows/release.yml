name: "experimental release"
concurrency: release
on:
  push:
    branches:
      - main
      - tetra
jobs:
  release:
    name: "Create release"
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      timestamp: ${{ steps.get-timestamp.outputs.time }}
      release_already_exists: ${{ steps.tag_check.outputs.exists }}
      version_name: ${{ steps.generate_env_vars.outputs.tag_name }}
      version_postfix: ${{ steps.generate_env_vars.outputs.build_version }}
    steps:
      - uses: actions/checkout@v2
      - name: "Get build timestamp"
        id: get-timestamp
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 0
          format: 'YYYYMMDDHHmm'
      - name: "Generate environmental variables"
        id: generate_env_vars
        run: |
          cargo_version=$(grep "version = " Cargo.toml | head -n 1 | sed -e "s/version = \"//" -e "s/\"//")
          version_postfix="experimental-${{ steps.get-timestamp.outputs.time }}"
          echo "::set-output name=tag_name::$cargo_version-$version_postfix"
          echo "::set-output name=release_name::Necromanzer $cargo_version-$version_postfix"
          echo "::set-output name=build_version::$version_postfix"
      - name: "Check if there is existing git tag"
        id: tag_check
        uses: mukunku/tag-exists-action@v1.0.0
        with:
          tag: ${{ steps.generate_env_vars.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Push tag"
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.5
        if: ${{ steps.tag_check.outputs.exists == 'false' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.generate_env_vars.outputs.tag_name }}
          tag_prefix: ""
      - name: "Create release"
        id: create_release
        uses: actions/create-release@v1
        if: ${{ steps.tag_check.outputs.exists == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_env_vars.outputs.tag_name }}
          release_name: ${{ steps.generate_env_vars.outputs.release_name }}
          body: |
            These are the outputs for the experimental build of commit [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          draft: false
          prerelease: true
  build_linux:
    needs: release
    if: ${{ needs.release.outputs.release_already_exists == 'false' }}
    name: "Build (linux)"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: "Install dependencies"
        run: |
          sudo apt install -y libsdl2-dev
# libsdl2-ttf-dev libsdl2-image-dev libsdl2-mixer-dev
      - name: "Set build version"
        run: |
          sed -i "s/BUILD_VERSION: \&str = \"dirty\"/BUILD_VERSION: \&str = \"${{ needs.release.outputs.version_postfix }}\"/" src/main.rs
      - name: "Run cargo build"
        run: |
          rustc --version
          cargo build --release
      - name: "Pack release"
        run: |
          mkdir necromanzer_linux
          cp target/release/necromanzer necromanzer_linux
          chmod +x necromanzer_linux/necromanzer
          cp res necromanzer_linux -r
          for file in necromanzer_linux/res/img/*.xcf; do
            rm "$file"
          done
          cat >necromanzer_linux/necromanzer_launcher.sh <<EOL
          #!/bin/sh
          TARGET_FILE=\$0
          cd "\$(dirname "\$TARGET_FILE")" || {
              echo "Could not change directory to '\$TARGET_FILE'" >&2
              exit 1
          }
          exec ./necromanzer "\$@"
          EOL
          chmod +x necromanzer_linux/necromanzer_launcher.sh
          tar -zcf necromanzer_linux.tar.gz necromanzer_linux
      - name: "Upload release asset"
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: necromanzer_linux.tar.gz
          asset_name: necromanzer-${{ needs.release.outputs.version_name }}-linux.tar.gz
          asset_content_type: application/gzip
  build_win:
    needs: release
    if: ${{ needs.release.outputs.release_already_exists == 'false' }}
    name: "Build (windows)"
    runs-on: windows-2016
    steps:
      - uses: actions/checkout@v2
      - name: "Install dependencies"
        shell: powershell
        run: |
          Import-Module BitsTransfer
          Start-BitsTransfer -Source "https://www.libsdl.org/release/SDL2-devel-2.0.16-VC.zip" -Destination SDL2.zip
          Expand-Archive -Path SDL2.zip -Destination .
          Get-ChildItem -Path SDL2-2.0.16/lib/x64/ -Recurse -File | Move-Item -Destination . -Force
#          Start-BitsTransfer -Source "https://www.libsdl.org/projects/SDL_mixer/release/SDL2_mixer-devel-2.0.4-VC.zip" -Destination SDL2_mixer.zip
#          Expand-Archive -Path SDL2_mixer.zip -Destination .
#          Get-ChildItem -Path SDL2_mixer-2.0.4/lib/x64/ -Recurse -File | Move-Item -Destination . -Force
#          Start-BitsTransfer -Source "https://www.libsdl.org/projects/SDL_image/release/SDL2_image-devel-2.0.5-VC.zip" -Destination SDL2_image.zip
#          Expand-Archive -Path SDL2_image.zip -Destination .
#          Get-ChildItem -Path SDL2_image-2.0.5/lib/x64/ -Recurse -File | Move-Item -Destination . -Force
#          Start-BitsTransfer -Source "https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-2.0.15-VC.zip" -Destination SDL2_ttf.zip
#          Expand-Archive -Path SDL2_ttf.zip -Destination .
#          Get-ChildItem -Path SDL2_ttf-2.0.15/lib/x64/ -Recurse -File | Move-Item -Destination . -Force
      - name: "Set build version"
        shell: bash
        run: |
          sed -i "s/BUILD_VERSION: \&str = \"dirty\"/BUILD_VERSION: \&str = \"${{ needs.release.outputs.version_name }}\"/" src/main.rs
      - name: "Run cargo build"
        run: |
          rustc --version
          cargo build --release
      - name: "Copy folders"
        shell: bash
        run: |
          mkdir Necromanzer
          cp target/release/necromanzer.exe Necromanzer
          cp res Necromanzer -r
          for file in Necromanzer/res/img/*.xcf; do
            rm "$file"
          done
          cp SDL2.dll Necromanzer
#          for file in ./*.dll; do
#            cp "$file" Necromanzer
#          done
      - name: "Pack release"
        shell: powershell
        run: |
          Compress-Archive -Path Necromanzer -DestinationPath necromanzer_windows.zip
      - name: "Upload release asset"
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: necromanzer_windows.zip
          asset_name: necromanzer-${{ needs.release.outputs.version_name }}-windows.zip
          asset_content_type: application/gzip